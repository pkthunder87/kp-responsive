Day 8

An introduction to flexbox

If you have 2+ flex items and 1 of them has shorter content than the others. You can add width: 100%; to the flex items to make sure they share the same size.

Day 9

We can add row to container div to have less HTML. 
     <div class="container row">
So container is mostly for widths/BG, etc. and the row is just for flex/justify/etc.. Keep their CSS rules SEPARATE!

To prevent a flex-item that is an image from stretching to match text/content give it a class and use align-self. VERY HANDY ON IMAGES!

Column widths and flexbox
WORTH REWATCHING!
If there is no content flex-items will try to shrink down to their smallest possible size. That's why width: 100% items will try to shrink/grow at the same ratio.

If we have leftover/empty space horizontally, and items content width doesn't add up to 100%, we can control that space with justify-content. Same with align-content but with vertical left-over/empty space.

Flexbox Challenge #2
Having 1 central class="container row" class to control multiple sections/divs is a great way to lineup responsive layouts. Like making our hero image and sidebar lineup and size match perfectly! 

Day 12
margin: 0 auto;
Equal margins on the left and right.
margin-left: auto;
Pushes item all the way to the right!

If we know the amount of list items we can just split them into 2 ul and use flex with 
justify-content: space-between;

/* Unknown item amount and last two link items moved to the right */
.nav__list li:nth-last-child(2) {
  margin-left: auto;
}

More improvements to the navigation

When we have tiny flex items they will try to shrink down to as small as possible. So if we want our flex container to take up the entire space/width we can just do width: 100%; or use flex-grow: 1;.

flex-grow: 1; sort of ignores width because it will always try to be as big as it possibly can be.

Centering things the easy way
Auto margins are AMAZING. NEED TO USE THEM MORE OFTEN!
